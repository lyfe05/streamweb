name: Generate Live JSON

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC (5 AM GMT+3)
  workflow_dispatch:  # Allow manual triggering

jobs:
  generate-live-json:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp rapidfuzz

    - name: Debug current directory
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Public directory contents:"
        ls -la public/ || echo "No public directory yet"

    - name: Run live_gen.py
      id: generate-json
      run: |
        python live_gen.py > output.json
        echo "JSON generated successfully"
        echo "File size: $(wc -c < output.json) bytes"
        echo "First 100 chars:"
        head -c 100 output.json

    - name: Encode JSON with custom base32
      id: encode-json
      run: |
        # First, check if output.json exists and has content
        if [ ! -s output.json ]; then
          echo "❌ ERROR: output.json is empty or doesn't exist"
          exit 1
        fi

        python -c "
        import json
        import os
        from pathlib import Path
        
        # Custom encoder (matches the JavaScript implementation)
        _CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef'
        
        def custom_encode(input_string):
            '''Encode string using custom base32 encoding (matches JS implementation)'''
            input_bytes = input_string.encode('utf-8')
            output = []
            bit_buffer = 0
            bit_count = 0
            
            for byte in input_bytes:
                bit_buffer = (bit_buffer << 8) | byte
                bit_count += 8
                
                while bit_count >= 5:
                    bit_count -= 5
                    value = (bit_buffer >> bit_count) & 0x1F
                    output.append(_CHARSET[value])
                    bit_buffer &= (1 << bit_count) - 1
            
            if bit_count > 0:
                bit_buffer <<= (5 - bit_count)
                value = bit_buffer & 0x1F
                output.append(_CHARSET[value])
                output.append('=')
            
            return ''.join(output)
        
        # Read the generated JSON
        try:
            with open('output.json', 'r') as f:
                json_data = f.read()
            
            print(f'Input JSON size: {len(json_data)} characters')
            
            # Validate it's valid JSON
            parsed_json = json.loads(json_data)
            print('✅ JSON is valid')
            
            # Encode the JSON
            encoded_data = custom_encode(json_data)
            print(f'Encoded data size: {len(encoded_data)} characters')
            print(f'First 50 chars of encoded: {encoded_data[:50]}')
            
            # Create public directory if it doesn't exist
            Path('public').mkdir(exist_ok=True)
            
            # Write encoded data to public/live.json (OVERWRITES existing file)
            with open('public/live.json', 'w') as f:
                f.write(encoded_data)
            
            print('✅ JSON successfully encoded and saved to public/live.json')
            
            # Verify the file was written
            if os.path.exists('public/live.json'):
                file_size = os.path.getsize('public/live.json')
                print(f'✅ File created successfully, size: {file_size} bytes')
            else:
                print('❌ ERROR: File was not created')
                exit(1)
            
        except json.JSONDecodeError as e:
            print(f'❌ Error: Invalid JSON generated: {e}')
            print(f'JSON content: {json_data[:200]}...')
            exit(1)
        except Exception as e:
            print(f'❌ Unexpected error: {e}')
            exit(1)
        "

    - name: Verify encoded file was created
      run: |
        echo "Checking public/live.json:"
        ls -la public/live.json
        echo "File size: $(wc -c < public/live.json) bytes"
        echo "First 50 characters:"
        head -c 50 public/live.json
        echo -e "\n"

    - name: Upload encoded JSON as artifact
      uses: actions/upload-artifact@v4
      with:
        name: live-json
        path: public/live.json

    - name: Deploy to GitHub Pages (optional)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        keep_files: true
